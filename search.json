[{"path":"/LICENSE.html","id":null,"dir":"","previous_headings":"","what":"MIT License","title":"MIT License","text":"Copyright (c) 2022 Genentech Permission hereby granted, free charge, person obtaining copy software associated documentation files (“Software”), deal Software without restriction, including without limitation rights use, copy, modify, merge, publish, distribute, sublicense, /sell copies Software, permit persons Software furnished , subject following conditions: copyright notice permission notice shall included copies substantial portions Software. SOFTWARE PROVIDED “”, WITHOUT WARRANTY KIND, EXPRESS IMPLIED, INCLUDING LIMITED WARRANTIES MERCHANTABILITY, FITNESS PARTICULAR PURPOSE NONINFRINGEMENT. EVENT SHALL AUTHORS COPYRIGHT HOLDERS LIABLE CLAIM, DAMAGES LIABILITY, WHETHER ACTION CONTRACT, TORT OTHERWISE, ARISING , CONNECTION SOFTWARE USE DEALINGS SOFTWARE.","code":""},{"path":"/articles/combining_srcref_data.html","id":"setup","dir":"Articles","previous_headings":"","what":"Setup","title":"Combining srcref Data","text":"begin, ’ll set demo coverage object package namespace can use showcase relationships:","code":"library(withr) library(covr) library(remotes)  withr::with_temp_libpaths({   options(keep.source = TRUE, keep.source.pkg = TRUE, covr.record_tests = TRUE)   examplepkg_source_path <- system.file(\"examplepkg\", package = \"covtracer\")   remotes::install_local(     examplepkg_source_path,      quiet = TRUE,     INSTALL_opts = c(\"--with-keep.source\", \"--install-tests\")   )   examplepkg_cov <- covr::package_coverage(examplepkg_source_path)   examplepkg_ns <- getNamespace(\"examplepkg\") })"},{"path":"/articles/combining_srcref_data.html","id":"relational-srcref-data","dir":"Articles","previous_headings":"","what":"Relational srcref data","title":"Combining srcref Data","text":"First foremost, want able associate srcref objects. relationships define location code. srecref describes region code expression pulled , can compare determine whether srcref within, containing independent another. vignette gloss tables. details see Working srcrefs vignette.","code":""},{"path":"/articles/combining_srcref_data.html","id":"linking-covr-traces-to-package-object-srcrefs","dir":"Articles","previous_headings":"Relational srcref data","what":"Linking covr traces to package object srcrefs","title":"Combining srcref Data","text":"’s important note coverage traces always sit within package namespace object. namespace object might srcref full code function, coverage traces trace individual expressions within function. associate srcrefs relation, provide special joining function combine data.frames srcref columns. Just looking two data.frames, can use first trace package object illustrate relationship: Although still little arcane, can see package object code contains coverage trace. package code spans lines 19-21, whereas coverage trace lies line 20. information, can couple package object coverage traces contained within . expected, can see test trace (now \".x\" suffix) mapped expected corresponding package namespace object.","code":"traces_df <- trace_srcrefs_df(examplepkg_cov) pkg_ns_df <- pkg_srcrefs_df(examplepkg_ns) cat(\"pkg  : \", format(pkg_ns_df$srcref[\"s3_example_func.list\"]), \"\\n\") #> pkg  :  s3_example.R:20:25:22:1 cat(\"trace: \", format(traces_df$srcref[1L]), \"\\n\") #> trace:  r6_example.R:63:7:63:24 head(join_on_containing_srcrefs(traces_df, pkg_ns_df)) #>                                 name.x                srcref.x               name.y                 srcref.y #> 1 r6_example.R:63:7:63:24:7:24:100:100 r6_example.R:63:7:63:24               Person  r6_example.R:60:18:64:5 #> 2   s3_example.R:21:3:21:8:3:8:265:265  s3_example.R:21:3:21:8 s3_example_func.list  s3_example.R:20:25:22:1 #> 3 r6_example.R:74:7:74:23:7:23:111:111 r6_example.R:74:7:74:23               Person  r6_example.R:72:13:77:5 #> 4       r6_example.R:4:3:8:3:3:3:41:45    r6_example.R:4:3:8:3                adder    r6_example.R:3:10:9:1 #> 5   r6_example.R:97:9:97:22:9:22:97:97 r6_example.R:97:9:97:22                Rando r6_example.R:95:12:102:3 #> 6 s3_example.R:11:3:11:30:3:30:255:255 s3_example.R:11:3:11:30      s3_example_func  s3_example.R:10:20:12:1 #>   namespace.y #> 1  examplepkg #> 2  examplepkg #> 3  examplepkg #> 4  examplepkg #> 5  examplepkg #> 6  examplepkg"},{"path":"/articles/combining_srcref_data.html","id":"linking-unit-tests-to-evaluated-covr-traces","dir":"Articles","previous_headings":"Relational srcref data","what":"Linking unit tests to evaluated covr traces","title":"Combining srcref Data","text":"Although relationship doesn’t require fancy srcref joining, can associate tests traces simple mapping indices. , test_trace_mapping() function provided reshape covr object (produced using options(covr.record_tests = TRUE)) create unified table across covr traces: test trace columns contain row indices respective test_srcrefs_df() trace_srcrefs_df() data.frames, allowing data joined. However, since easy testing suite cause evaluation enormous number traces, matrix can become extremely long. recommended aggregation subsetting matrix trying use join data-rich data. can also see evaluation order stored (), well stack depth evaluated (depth). added info, might consider first filtering first trace evaluated test, count times line code evaluated test aggregating rows.","code":"head(test_trace_mapping(examplepkg_cov)) #>      test depth i trace #> [1,]    1     1 1    24 #> [2,]    2    37 1    19 #> [3,]    2    38 2    15 #> [4,]    2    39 3    23 #> [5,]    2    40 4    22 #> [6,]    2    40 5    26"},{"path":"/articles/combining_srcref_data.html","id":"relational-documentation-data","dir":"Articles","previous_headings":"","what":"Relational documentation data","title":"Combining srcref Data","text":"side process, also need associate package objects documentation. many cases, trivial, name exported object can used directly find documentation come expect using ?<object>. holds simple functions. However, objects aliased different documentation files built package build time internal representations, S4 classes, R6 classes. handle cases, can use Rd_df() function associate available source code documentation file. aliases also used use pkg_srcrefs_df() can used associate srcrefs .Rd files. ’ll see don’t srcrefs associated \"data\" \"class\" doctype documentation objects source code, even source code used create bulid time.","code":"# filter for interesting columns for display cols <- c(\"file\", \"alias\", \"doctype\") Rd_df(examplepkg_source_path)[, cols] #>                          file                   alias doctype #> 1              Accumulator.Rd             Accumulator    <NA> #> 2                    adder.Rd                   adder    <NA> #> 3       complex_call_stack.Rd      complex_call_stack    <NA> #> 4   deeper_nested_function.Rd  deeper_nested_function    <NA> #> 5               hypotenuse.Rd              hypotenuse    <NA> #> 6                increment.Rd               increment    <NA> #> 7   names-S4Example-method.Rd  names,S4Example-method    <NA> #> 8  names-S4Example2-method.Rd names,S4Example2-method    <NA> #> 9          nested_function.Rd         nested_function    <NA> #> 10                  Person.Rd                  Person    <NA> #> 11             PersonPrime.Rd             PersonPrime    data #> 12                   Rando.Rd                   Rando    <NA> #> 13         rd_data_sampler.Rd         rd_data_sampler    data #> 14              rd_sampler.Rd              rd_sampler    <NA> #> 15      recursive_function.Rd      recursive_function    <NA> #> 16        reexport_example.Rd        reexport_example    <NA> #> 17               reexports.Rd               reexports  import #> 18               reexports.Rd                    help  import #> 19         s3_example_func.Rd         s3_example_func    <NA> #> 20         s3_example_func.Rd s3_example_func.default    <NA> #> 21         s3_example_func.Rd    s3_example_func.list    <NA> #> 22         S4Example-class.Rd         S4Example-class   class #> 23         S4Example-class.Rd               S4Example   class #> 24        S4Example2-class.Rd        S4Example2-class   class #> 25        S4Example2-class.Rd              S4Example2   class #> 26   show-S4Example-method.Rd   show,S4Example-method    <NA> pkg_srcrefs_df(examplepkg_ns) #>                       name                          srcref  namespace #> 1          nested_function  complex_call_stack.R:9:20:11:1 examplepkg #> 2                    adder           r6_example.R:3:10:9:1 examplepkg #> 3       recursive_function complex_call_stack.R:21:23:24:1 examplepkg #> 4              Accumulator         r6_example.R:29:16:32:3 examplepkg #> 6     s3_example_func.list         s3_example.R:20:25:22:1 examplepkg #> 7          s3_example_func         s3_example.R:10:20:12:1 examplepkg #> 8                   Person         r6_example.R:60:18:64:5 examplepkg #> 9                   Person         r6_example.R:72:13:77:5 examplepkg #> 10               increment         s4_example.R:58:35:60:1 examplepkg #> 11              rd_sampler         rd_sampler.R:56:15:58:1 examplepkg #> 12  deeper_nested_function complex_call_stack.R:15:27:17:1 examplepkg #> 13              hypotenuse           hypotenuse.R:7:15:9:1 examplepkg #> 14                   Rando        r6_example.R:95:12:102:3 examplepkg #> 15               increment         s4_example.R:53:25:55:1 examplepkg #> 16 s3_example_func.default         s3_example.R:15:28:17:1 examplepkg #> 17  names,S4Example-method         s4_example.R:17:44:19:1 examplepkg #> 18 names,S4Example2-method         s4_example.R:43:45:45:1 examplepkg #> 19   show,S4Example-method         s4_example.R:25:43:27:1 examplepkg #> 20      complex_call_stack   complex_call_stack.R:3:23:5:1 examplepkg #> 21             PersonPrime                            <NA>       <NA> #> 22                    help                            <NA>      utils #> 23        reexport_example                            <NA>      utils #> 24              S4Example2                            <NA> examplepkg #> 25               S4Example                            <NA> examplepkg #> 26                  person                            <NA>      utils #> 27         rd_data_sampler                            <NA>       <NA>"},{"path":"/articles/combining_srcref_data.html","id":"summary","dir":"Articles","previous_headings":"","what":"Summary","title":"Combining srcref Data","text":"relationships, can build really deep understandings exactly code test evaluates tie test together documented behaviors.","code":""},{"path":"/articles/plotting_test_paths.html","id":"setup","dir":"Articles","previous_headings":"","what":"Setup","title":"Plotting Test Paths","text":"covtracer analysis, need start collecting coverage traces package. example package installed necessary flags coverage traces can collected. well, analysis use supporting packages.","code":"library(covtracer)  library(withr) library(covr) library(remotes) options(keep.source = TRUE, keep.source.pkg = TRUE, covr.record_tests = TRUE) examplepkg_source_path <- system.file(\"examplepkg\", package = \"covtracer\")  remotes::install_local(   examplepkg_source_path,   quiet = TRUE,   force = TRUE,   INSTALL_opts = c(\"--with-keep.source\", \"--install-tests\") )  examplepkg_cov <- covr::package_coverage(examplepkg_source_path) examplepkg_ns <- getNamespace(\"examplepkg\")  ttdf <- covtracer::test_trace_df(examplepkg_cov, aggregate_by = NULL) library(dplyr) #>  #> Attaching package: 'dplyr' #> The following objects are masked from 'package:stats': #>  #>     filter, lag #> The following objects are masked from 'package:base': #>  #>     intersect, setdiff, setequal, union library(igraph) #>  #> Attaching package: 'igraph' #> The following objects are masked from 'package:dplyr': #>  #>     as_data_frame, groups, union #> The following objects are masked from 'package:stats': #>  #>     decompose, spectrum #> The following object is masked from 'package:base': #>  #>     union"},{"path":"/articles/plotting_test_paths.html","id":"preparing-graph-data","dir":"Articles","previous_headings":"","what":"Preparing Graph Data","title":"Plotting Test Paths","text":"use test data, clean incoming data, removing untested records filtering untestable objects like S4 class definitions.","code":"ttdf <- ttdf %>%   filter(!is.na(test_name)) %>%   filter(is.na(doctype) | !doctype %in% \"class\") %>%   select(test_name, alias, is_exported, i) %>%   arrange(test_name, i) %>%   mutate(test_id = cumsum(!duplicated(test_name)))  head(ttdf) #>                                      test_name                  alias is_exported i test_id #> 1 Calling a deeply nested series of functions.     complex_call_stack        TRUE 1       1 #> 2 Calling a deeply nested series of functions.        nested_function       FALSE 2       1 #> 3 Calling a deeply nested series of functions. deeper_nested_function        TRUE 3       1 #> 4 Calling a deeply nested series of functions.     recursive_function       FALSE 4       1 #> 5 Calling a deeply nested series of functions.     recursive_function       FALSE 5       1 #> 6 Calling a deeply nested series of functions.     recursive_function       FALSE 6       1"},{"path":"/articles/plotting_test_paths.html","id":"create-edges-of-our-test-path","dir":"Articles","previous_headings":"","what":"Create Edges of Our Test Path","title":"Plotting Test Paths","text":"test-trace dataframe index test expressions, linked traces evaluate, added order evaluation, . prepare visualization, want convert dataframe record describes step process. Instead test linking trace index, jump test path link calling expression evaluated expression. Likewise, want capture metadata vertex. Since vertex context can either test trace, data captured differently class vertex.","code":"edges_df <- ttdf %>%   split(.$test_name) %>%   lapply(function(sdf) {     unique(data.frame(       from = c(sdf$test_name[[1L]], head(sdf$alias, -1L)),       to = sdf$alias     ))   }) %>%   bind_rows() %>%   distinct()  head(edges_df) #>                                             from                     to #> 1   Calling a deeply nested series of functions.     complex_call_stack #> 2                             complex_call_stack        nested_function #> 3                                nested_function deeper_nested_function #> 4                         deeper_nested_function     recursive_function #> 5                             recursive_function     recursive_function #> 6 Calling a function halfway through call stack. deeper_nested_function test_names <- Filter(Negate(is.na), unique(ttdf$test_name)) obj_names <- Filter(Negate(is.na), unique(ttdf$alias))  n_tests <- length(test_names) n_objs <- length(obj_names)  vertices_df <- data.frame(   name = c(test_names, obj_names),   color = rep(c(\"cornflowerblue\", \"darkgoldenrod\"), times = c(n_tests, n_objs)),   label = c(sprintf(\"Test #%d\", seq_along(test_names)), obj_names),   test_id = c(seq_along(test_names), rep_len(NA, n_objs)),   is_test = rep(c(TRUE, FALSE), times = c(n_tests, n_objs)),   is_exported = c(rep_len(NA, n_tests), ttdf$is_exported[match(obj_names, ttdf$alias)]) )  vertices_df <- vertices_df %>%   mutate(color = ifelse(is_exported, \"goldenrod\", color))  vertices_df %>%   select(name, label) %>%   head() #>                                                       name   label #> 1             Calling a deeply nested series of functions. Test #1 #> 2           Calling a function halfway through call stack. Test #2 #> 3       Example R6 Accumulator class constructor is traced Test #3 #> 4          Example R6 Accumulator class methods are traced Test #4 #> 5        Example R6 Person class public methods are traced Test #5 #> 6 Example R6 Rando class active field functions are traced Test #6"},{"path":"/articles/plotting_test_paths.html","id":"plotting-our-test-paths","dir":"Articles","previous_headings":"","what":"Plotting Our Test Paths","title":"Plotting Test Paths","text":"Finally, can plot network test executions:  Naturally, plethora wonderful visualization packages available accept igraph data input. graph just well plotted visNetwork package, though omitted keep example analysis minimal.","code":"g <- igraph::graph_from_data_frame(edges_df, vertices = vertices_df)  par(mai = rep(0, 4), omi = rep(0, 4L)) plot.igraph(g,   vertex.size = 8,   vertex.label = V(g)$label,   vertex.color = V(g)$color,   vertex.label.family = \"sans\",   vertex.label.color = \"black\",   vertex.label.dist = 1,   vertex.label.degree = - pi / 2,   vertex.label.cex = 0.8,   mark.border = NA,   margin = c(0, 0.2, 0, 0.2) )  legend(   \"bottomleft\",   inset = c(0.05, 0),   legend = c(\"test\", \"exported function\", \"unexported function\"),   col = c(\"cornflowerblue\", \"goldenrod\", \"darkgoldenrod\"),   pch = 16,   bty = \"n\" )"},{"path":"/articles/working_with_srcrefs.html","id":"what-are-srcref-objects","dir":"Articles","previous_headings":"","what":"What are srcref objects?","title":"Working with srcrefs","text":"srcrefs base R data type used frequently working package code. install package using ---keep.source flag, data package’s source code representation bound objects namespace attaches loads. short, srcrefs simple data structures store file path source code information find relevant bits file including line character columns start end source code. extensive details, refer ?getSrcref ?srcref. Lets see action:","code":"getSrcref(covtracer::test_trace_df) # get line and column ranges (for details see ?srcref) as.numeric(getSrcref(covtracer::test_trace_df)) #> numeric(0) getSrcFilename(covtracer::test_trace_df) #> character(0)"},{"path":"/articles/working_with_srcrefs.html","id":"extracting-relevant-traceability-srcrefs","dir":"Articles","previous_headings":"","what":"Extracting relevant traceability srcrefs","title":"Working with srcrefs","text":"Instead working objects directly, helper functions making objects easier extract. tracing coverage paths, three important classes srcrefs: Package namespace object srcrefs Test code srcrefs Coverage trace srcrefs","code":""},{"path":"/articles/working_with_srcrefs.html","id":"setup","dir":"Articles","previous_headings":"Extracting relevant traceability srcrefs","what":"Setup","title":"Working with srcrefs","text":"begin, ’ll get package test coverage object store package namespace. take extra precaution use temporary library sake example, necessary want avoid installing package working library.","code":"library(withr) library(covr) library(remotes)  withr::with_temp_libpaths({   options(keep.source = TRUE, keep.source.pkg = TRUE, covr.record_tests = TRUE)   examplepkg_source_path <- system.file(\"examplepkg\", package = \"covtracer\")   remotes::install_local(     examplepkg_source_path,     quiet = TRUE,     INSTALL_opts = c(\"--with-keep.source\", \"--install-tests\")   )   examplepkg_cov <- covr::package_coverage(examplepkg_source_path)   examplepkg_ns <- getNamespace(\"examplepkg\") })"},{"path":"/articles/working_with_srcrefs.html","id":"functions-for-extracting-srcrefs","dir":"Articles","previous_headings":"Extracting relevant traceability srcrefs","what":"Functions for extracting srcrefs","title":"Working with srcrefs","text":"functions teasing information succinctly. include pkg, trace, test flavors *_srcefs *_srcrefs_df families functions (eg, pkg_srcrefs_df()). *_srcrefs() functions return primitive list objects. can bit cumbersome read , *_srcrefs_df() alternatives provided improved introspection readability. data.frame results contain srcref column, element srcref object. Even though appears succinct text, contains srcref data.","code":""},{"path":"/articles/working_with_srcrefs.html","id":"extracting-package-namespace-object-srcrefs","dir":"Articles","previous_headings":"Extracting relevant traceability srcrefs > Functions for extracting srcrefs","what":"Extracting package namespace object srcrefs","title":"Working with srcrefs","text":"Getting list srcrefs Viewing results data.frame Extracing individual srcrefs resulting data.frame","code":"pkg_srcrefs(examplepkg_ns)[\"test_description.character\"] head(pkg_srcrefs_df(examplepkg_ns)) #>                   name                          srcref  namespace #> 1      nested_function  complex_call_stack.R:9:20:11:1 examplepkg #> 2                adder           r6_example.R:3:10:9:1 examplepkg #> 3   recursive_function complex_call_stack.R:21:23:24:1 examplepkg #> 4          Accumulator         r6_example.R:29:16:32:3 examplepkg #> 6 s3_example_func.list         s3_example.R:20:25:22:1 examplepkg #> 7      s3_example_func         s3_example.R:10:20:12:1 examplepkg df <- pkg_srcrefs_df(examplepkg_ns) df$srcref[[1L]] #> function(x) { #>   deeper_nested_function(x) #> }"},{"path":"/articles/working_with_srcrefs.html","id":"extracting-test-srcrefs","dir":"Articles","previous_headings":"Extracting relevant traceability srcrefs > Functions for extracting srcrefs","what":"Extracting test srcrefs","title":"Working with srcrefs","text":"Similarly, can extract test srcrefs using equivalent functions tests. However, get test traces, must first run package coverage, records exactly tests actually run test suite. Starting coverage omits skipped tests unevaluated test lines, presenting test code actually run. Note original source files longer exist, covr install package temporary location testing. , test “srcrefs” actually call objects with_pseudo_srcref, allowing treated like srcrefs consistency. Despite valid srcfile, can still use favorite srcref functions with_pseudo_scref subclass: finally, corresponding *_df function make information easier see glance:","code":"examplepkg_test_srcrefs <- test_srcrefs(examplepkg_cov) getSrcFilename(examplepkg_test_srcrefs[[1]]) #> character(0) head(examplepkg_test_srcrefs) #> [[1]] #> show(<myS4Example>) #>  #> $`/tmp/RtmpLptp6e/R_LIBS1e86200c2dcf/examplepkg/examplepkg-tests/testthat/test-complex-calls.R:2:3:2:50:3:50:2:2` #> complex_call_stack(\"test\") #>  #> $`/tmp/RtmpLptp6e/R_LIBS1e86200c2dcf/examplepkg/examplepkg-tests/testthat/test-complex-calls.R:6:3:6:54:3:54:6:6` #> deeper_nested_function(\"test\") #>  #> $`/tmp/RtmpLptp6e/R_LIBS1e86200c2dcf/examplepkg/examplepkg-tests/testthat/test-complex-calls.R:15:7:15:54:7:54:15:15` #> complex_call_stack(\"test\") #>  #> $`/tmp/RtmpLptp6e/R_LIBS1e86200c2dcf/examplepkg/examplepkg-tests/testthat/test-complex-calls.R:15:7:15:54:7:54:15:15` #> complex_call_stack(\"test\") #>  #> $`/tmp/RtmpLptp6e/R_LIBS1e86200c2dcf/examplepkg/examplepkg-tests/testthat/test-complex-calls.R:15:7:15:54:7:54:15:15` #> complex_call_stack(\"test\")"},{"path":"/articles/working_with_srcrefs.html","id":"extracting-trace-srcrefs","dir":"Articles","previous_headings":"Extracting relevant traceability srcrefs > Functions for extracting srcrefs","what":"Extracting trace srcrefs","title":"Working with srcrefs","text":"final piece puzzle coverage traces. simplest find, since covr stores information every coverage object. Even without helper functions, can find information indexing coverage object explore . Nevertheless, provide simple alternatives restructuring data something consistent rest pacakge. just like functions family, comes *_df companion function.","code":"examplepkg_cov[[1]]$srcref #> private$age <- age examplepkg_trace_srcrefs <- trace_srcrefs(examplepkg_cov) examplepkg_trace_srcrefs[1] #> $`r6_example.R:63:7:63:24:7:24:100:100` #>  63 #>   7 #>  63 #>  24 #>   7 #>  24 #> 100 #> 100 head(trace_srcrefs_df(examplepkg_cov)) #>                                   name                  srcref #> 1 r6_example.R:63:7:63:24:7:24:100:100 r6_example.R:63:7:63:24 #> 2   s3_example.R:21:3:21:8:3:8:265:265  s3_example.R:21:3:21:8 #> 3 r6_example.R:74:7:74:23:7:23:111:111 r6_example.R:74:7:74:23 #> 4       r6_example.R:4:3:8:3:3:3:41:45    r6_example.R:4:3:8:3 #> 5   r6_example.R:97:9:97:22:9:22:97:97 r6_example.R:97:9:97:22 #> 6 s3_example.R:11:3:11:30:3:30:255:255 s3_example.R:11:3:11:30"},{"path":"/articles/working_with_srcrefs.html","id":"summary","dir":"Articles","previous_headings":"","what":"Summary","title":"Working with srcrefs","text":"information, can match related code blocks one another retrospectively evaluate relationship package code tests.","code":""},{"path":"/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Doug Kelkhoff. Author, maintainer. Andrew McNeil. Author.","code":""},{"path":"/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Kelkhoff D, McNeil (2023). covtracer: Tools contextualizing tests. R package version 0.0.0.9014, https://github.com/genentech/covtracer.","code":"@Manual{,   title = {covtracer: Tools for contextualizing tests},   author = {Doug Kelkhoff and Andrew McNeil},   year = {2023},   note = {R package version 0.0.0.9014},   url = {https://github.com/genentech/covtracer}, }"},{"path":"/index.html","id":"covtracer-","dir":"","previous_headings":"","what":"Tools for contextualizing tests","title":"Tools for contextualizing tests","text":"Tools contextualizing tests, built using covr test traces. package provides utilities linking assortment test package information paint complete picture test performed.","code":"flowchart LR     tests[Tests] <--> traces[Traced Exprs] <--> code[Package Code] <--> docs[Package Documentation]"},{"path":"/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"Tools for contextualizing tests","text":"install, use remotes install directly GitHub Functionality hinges heavily coverage objects prepared using covr (≥ 3.5.1.9003). ensure suggested dependency requirements met, install dependencies = TRUE (satisfy dependencies).","code":"# will install covr >= v3.5.1.9003 for examples remotes::install_github(\"Genentech/covtracer\", dependencies = TRUE)"},{"path":"/index.html","id":"motivation","dir":"","previous_headings":"","what":"Motivation","title":"Tools for contextualizing tests","text":"Tests black boxes. comes verifying behaviors code, can use observations code executed test build complete picture exactly test . core part software validation. combining information test, tested package code linking code package documentation, can link documented behaviors respective tests.","code":""},{"path":"/index.html","id":"getting-started","dir":"","previous_headings":"","what":"Getting Started","title":"Tools for contextualizing tests","text":"Test traces connected evaluated code using covr (≥ 3.5.1.9003). Likewise, new option flag (covr.record_tests) must set order record tests alongside coverage traces. Finally, package evaluate must installed source references order map components together. ’s lot configure, ’re position test data valuable hopefully ’s worth setup. ’s lot info resulting data.frame, ’ll focus just critical piece, showing tests evaluate code related documented behaviors. show one might map unit tests evaluated, documented objects. Note: ignore documentation datasets S4 class constructors. Although defined package, don’t map testable lines code constructed package built. can quickly see functions methods entirely untested.","code":"library(covtracer)  # additional demo packages library(dplyr) library(withr) library(covr) library(remotes)  withr::with_temp_libpaths({   pkg <- system.file(\"examplepkg\", package = \"covtracer\")   remotes::install_local(     pkg,      force = TRUE,      quiet = TRUE,      INSTALL_opts = \"--with-keep.source\"   )    options(covr.record_tests = TRUE)   cov <- covr::package_coverage(pkg)    ttdf <- test_trace_df(cov) }) traceability_matrix <- ttdf %>%   filter(!doctype %in% c(\"data\", \"class\")) %>%  # ignore objects without testable code   select(test_name, file) %>%   filter(!duplicated(.)) %>%   arrange(file)  traceability_matrix #>                                                    test_name                       file #> 1            Example R6 Accumulator class methods are traced             Accumulator.Rd #> 2         Example R6 Accumulator class constructor is traced             Accumulator.Rd #> 3                                                       <NA>                   adder.Rd #> 4            Example R6 Accumulator class methods are traced                   adder.Rd #> 5               Calling a deeply nested series of functions.      complex_call_stack.Rd #> 6             Calling a function halfway through call stack.  deeper_nested_function.Rd #> 7               Calling a deeply nested series of functions.  deeper_nested_function.Rd #> 8  hypotenuse is calculated correctly; with negative lengths              hypotenuse.Rd #> 9                         hypotenuse is calculated correctly              hypotenuse.Rd #> 10                  S4Example increment generic method works               increment.Rd #> 11                              S4Example names method works  names-S4Example-method.Rd #> 12                                                      <NA> names-S4Example2-method.Rd #> 13              Calling a deeply nested series of functions.         nested_function.Rd #> 14         Example R6 Person class public methods are traced                  Person.Rd #> 15                                                      <NA>                   Rando.Rd #> 16  Example R6 Rando class active field functions are traced                   Rando.Rd #> 17                                                      <NA>              rd_sampler.Rd #> 18            Calling a function halfway through call stack.      recursive_function.Rd #> 19              Calling a deeply nested series of functions.      recursive_function.Rd #> 20                                                      <NA>        reexport_example.Rd #> 21                                                      <NA>               reexports.Rd #> 22                 s3_example_func works using list dispatch         s3_example_func.Rd #> 23              s3_example_func works using default dispatch         s3_example_func.Rd #> 24                                                      <NA>                       <NA>"},{"path":"/index.html","id":"use-cases","dir":"","previous_headings":"","what":"Use Cases","title":"Tools for contextualizing tests","text":"data.frame returned test_trace_df contains ton information, can measure dimensions quality tests relatively straightforward analysis.","code":""},{"path":"/index.html","id":"traceability-matrix","dir":"","previous_headings":"Use Cases","what":"Traceability Matrix","title":"Tools for contextualizing tests","text":"Perhaps immediate use case map unit tests documented behaviors.","code":"ttdf %>%   filter(!doctype %in% c(\"data\", \"class\")) %>%  # ignore objects without testable code   select(test_name, file) %>%   filter(!duplicated(.)) %>%   arrange(file) #>                                                    test_name                       file #> 1            Example R6 Accumulator class methods are traced             Accumulator.Rd #> 2         Example R6 Accumulator class constructor is traced             Accumulator.Rd #> 3                                                       <NA>                   adder.Rd #> 4            Example R6 Accumulator class methods are traced                   adder.Rd #> 5               Calling a deeply nested series of functions.      complex_call_stack.Rd #> 6             Calling a function halfway through call stack.  deeper_nested_function.Rd #> 7               Calling a deeply nested series of functions.  deeper_nested_function.Rd #> 8  hypotenuse is calculated correctly; with negative lengths              hypotenuse.Rd #> 9                         hypotenuse is calculated correctly              hypotenuse.Rd #> 10                  S4Example increment generic method works               increment.Rd #> 11                              S4Example names method works  names-S4Example-method.Rd #> 12                                                      <NA> names-S4Example2-method.Rd #> 13              Calling a deeply nested series of functions.         nested_function.Rd #> 14         Example R6 Person class public methods are traced                  Person.Rd #> 15                                                      <NA>                   Rando.Rd #> 16  Example R6 Rando class active field functions are traced                   Rando.Rd #> 17                                                      <NA>              rd_sampler.Rd #> 18            Calling a function halfway through call stack.      recursive_function.Rd #> 19              Calling a deeply nested series of functions.      recursive_function.Rd #> 20                                                      <NA>        reexport_example.Rd #> 21                                                      <NA>               reexports.Rd #> 22                 s3_example_func works using list dispatch         s3_example_func.Rd #> 23              s3_example_func works using default dispatch         s3_example_func.Rd #> 24                                                      <NA>                       <NA>"},{"path":"/index.html","id":"finding-untested-behaviors","dir":"","previous_headings":"Use Cases","what":"Finding Untested Behaviors","title":"Tools for contextualizing tests","text":"can map unit testing documentation, can filter documentation covered test.","code":"ttdf %>%   filter(!doctype %in% c(\"data\", \"class\")) %>%  # ignore objects without testable code   select(test_name, count, alias, file) %>%   filter(is.na(count)) %>%   arrange(alias) #>   test_name count                   alias                       file #> 1      <NA>    NA                   adder                   adder.Rd #> 2      <NA>    NA                    help               reexports.Rd #> 3      <NA>    NA names,S4Example2-method names-S4Example2-method.Rd #> 4      <NA>    NA                  person                       <NA> #> 5      <NA>    NA                   Rando                   Rando.Rd #> 6      <NA>    NA              rd_sampler              rd_sampler.Rd #> 7      <NA>    NA        reexport_example        reexport_example.Rd #> 8      <NA>    NA               reexports               reexports.Rd"},{"path":"/index.html","id":"filter-for-only-directly-tested-behaviors","dir":"","previous_headings":"Use Cases","what":"Filter For Only Directly Tested Behaviors","title":"Tools for contextualizing tests","text":"tests evaluate broad set functionality calling functions call internal package functions. often perfectly fine, since mechanisms calling internal functions limited surfaced user-facing functions. Nevertheless, whether function called directly good indication “unit”-ness unit test. may consider coverage directly tested functions.","code":"ttdf %>%   filter(!doctype %in% c(\"data\", \"class\")) %>%  # ignore objects without testable code   select(direct, alias) %>%   group_by(alias) %>%   summarize(any_direct_tests = any(direct, na.rm = TRUE)) %>%   arrange(alias) #> # A tibble: 20 × 2 #>   alias                  any_direct_tests #>   <chr>                  <lgl>            #> 1 Accumulator            TRUE             #> 2 adder                  TRUE             #> 3 complex_call_stack     TRUE             #> 4 deeper_nested_function TRUE             #> 5 help                   FALSE            #> # … with 15 more rows"},{"path":"/reference/Rd_df.html","id":null,"dir":"Reference","previous_headings":"","what":"Create a tabular representation of man file information — Rd_df","title":"Create a tabular representation of man file information — Rd_df","text":"Provides Rd index info additional columns information exported object. Returns one record per documented object, even multiple objects alias documentation file.","code":""},{"path":"/reference/Rd_df.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create a tabular representation of man file information — Rd_df","text":"","code":"Rd_df(x)"},{"path":"/reference/Rd_df.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create a tabular representation of man file information — Rd_df","text":"x package object coerce","code":""},{"path":"/reference/Rd_df.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create a tabular representation of man file information — Rd_df","text":"data.frame documented object information variables: index numeric index documentation files associated documentation objects file character filename Rd file \"man\" directory filepath character file path Rd file \"man\" directory alias character object names aliases documentation filepath is_exported logical indicator whether aliased object exported package namespace doctype character representing Rd docType field.","code":""},{"path":"/reference/Rd_df.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create a tabular representation of man file information — Rd_df","text":"","code":"package_source_dir <- system.file(\"examplepkg\", package = \"covtracer\") Rd_df(package_source_dir) #>                          file #> 1              Accumulator.Rd #> 2                   Person.Rd #> 3              PersonPrime.Rd #> 4                    Rando.Rd #> 5          S4Example-class.Rd #> 6          S4Example-class.Rd #> 7         S4Example2-class.Rd #> 8         S4Example2-class.Rd #> 9                    adder.Rd #> 10      complex_call_stack.Rd #> 11  deeper_nested_function.Rd #> 12              hypotenuse.Rd #> 13               increment.Rd #> 14  names-S4Example-method.Rd #> 15 names-S4Example2-method.Rd #> 16         nested_function.Rd #> 17         rd_data_sampler.Rd #> 18              rd_sampler.Rd #> 19      recursive_function.Rd #> 20        reexport_example.Rd #> 21               reexports.Rd #> 22               reexports.Rd #> 23         s3_example_func.Rd #> 24         s3_example_func.Rd #> 25         s3_example_func.Rd #> 26   show-S4Example-method.Rd #>                                                                               filepath #> 1              /home/runner/work/_temp/Library/covtracer/examplepkg/man/Accumulator.Rd #> 2                   /home/runner/work/_temp/Library/covtracer/examplepkg/man/Person.Rd #> 3              /home/runner/work/_temp/Library/covtracer/examplepkg/man/PersonPrime.Rd #> 4                    /home/runner/work/_temp/Library/covtracer/examplepkg/man/Rando.Rd #> 5          /home/runner/work/_temp/Library/covtracer/examplepkg/man/S4Example-class.Rd #> 6          /home/runner/work/_temp/Library/covtracer/examplepkg/man/S4Example-class.Rd #> 7         /home/runner/work/_temp/Library/covtracer/examplepkg/man/S4Example2-class.Rd #> 8         /home/runner/work/_temp/Library/covtracer/examplepkg/man/S4Example2-class.Rd #> 9                    /home/runner/work/_temp/Library/covtracer/examplepkg/man/adder.Rd #> 10      /home/runner/work/_temp/Library/covtracer/examplepkg/man/complex_call_stack.Rd #> 11  /home/runner/work/_temp/Library/covtracer/examplepkg/man/deeper_nested_function.Rd #> 12              /home/runner/work/_temp/Library/covtracer/examplepkg/man/hypotenuse.Rd #> 13               /home/runner/work/_temp/Library/covtracer/examplepkg/man/increment.Rd #> 14  /home/runner/work/_temp/Library/covtracer/examplepkg/man/names-S4Example-method.Rd #> 15 /home/runner/work/_temp/Library/covtracer/examplepkg/man/names-S4Example2-method.Rd #> 16         /home/runner/work/_temp/Library/covtracer/examplepkg/man/nested_function.Rd #> 17         /home/runner/work/_temp/Library/covtracer/examplepkg/man/rd_data_sampler.Rd #> 18              /home/runner/work/_temp/Library/covtracer/examplepkg/man/rd_sampler.Rd #> 19      /home/runner/work/_temp/Library/covtracer/examplepkg/man/recursive_function.Rd #> 20        /home/runner/work/_temp/Library/covtracer/examplepkg/man/reexport_example.Rd #> 21               /home/runner/work/_temp/Library/covtracer/examplepkg/man/reexports.Rd #> 22               /home/runner/work/_temp/Library/covtracer/examplepkg/man/reexports.Rd #> 23         /home/runner/work/_temp/Library/covtracer/examplepkg/man/s3_example_func.Rd #> 24         /home/runner/work/_temp/Library/covtracer/examplepkg/man/s3_example_func.Rd #> 25         /home/runner/work/_temp/Library/covtracer/examplepkg/man/s3_example_func.Rd #> 26   /home/runner/work/_temp/Library/covtracer/examplepkg/man/show-S4Example-method.Rd #>                      alias is_exported doctype #> 1              Accumulator        TRUE    <NA> #> 2                   Person        TRUE    <NA> #> 3              PersonPrime        TRUE    data #> 4                    Rando        TRUE    <NA> #> 5          S4Example-class       FALSE   class #> 6                S4Example        TRUE   class #> 7         S4Example2-class       FALSE   class #> 8               S4Example2        TRUE   class #> 9                    adder       FALSE    <NA> #> 10      complex_call_stack        TRUE    <NA> #> 11  deeper_nested_function        TRUE    <NA> #> 12              hypotenuse        TRUE    <NA> #> 13               increment        TRUE    <NA> #> 14  names,S4Example-method       FALSE    <NA> #> 15 names,S4Example2-method       FALSE    <NA> #> 16         nested_function       FALSE    <NA> #> 17         rd_data_sampler        TRUE    data #> 18              rd_sampler        TRUE    <NA> #> 19      recursive_function       FALSE    <NA> #> 20        reexport_example        TRUE    <NA> #> 21               reexports       FALSE  import #> 22                    help        TRUE  import #> 23         s3_example_func        TRUE    <NA> #> 24 s3_example_func.default       FALSE    <NA> #> 25    s3_example_func.list       FALSE    <NA> #> 26   show,S4Example-method       FALSE    <NA>"},{"path":"/reference/as.data.frame.list_of_srcref.html","id":null,"dir":"Reference","previous_headings":"","what":"Coerce a list_of_srcref object to a data.frame — as.data.frame.list_of_srcref","title":"Coerce a list_of_srcref object to a data.frame — as.data.frame.list_of_srcref","text":"Coerce list_of_srcref object data.frame","code":""},{"path":"/reference/as.data.frame.list_of_srcref.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Coerce a list_of_srcref object to a data.frame — as.data.frame.list_of_srcref","text":"","code":"# S3 method for list_of_srcref as.data.frame(   x,   ...,   use.names = TRUE,   expand.srcref = FALSE,   row.names = NULL )"},{"path":"/reference/as.data.frame.list_of_srcref.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Coerce a list_of_srcref object to a data.frame — as.data.frame.list_of_srcref","text":"x list_of_srcref object ... Additional arguments unused use.names logical indicating whether names x used create name column. expand.srcref logical indicating whether expand components srcref objects separate columns. row.names NULL single integer character string     specifying column used row names, character     integer vector giving row names data frame.","code":""},{"path":"/reference/as.data.frame.list_of_srcref.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Coerce a list_of_srcref object to a data.frame — as.data.frame.list_of_srcref","text":"data.frame one record per srcref variables: name Names srcref objects, passed using names x use.names = TRUE srcref srcref objects expand.srcrefs = FALSE srcfile, line1, byte1, line2, col1, col2, parsed1, parsed2 srcref file location can determined. absolute path found, base file name provided srcref object numeric components srcref objects expand.srcrefs   = TRUE","code":""},{"path":"/reference/as.data.frame.list_of_srcref.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Coerce a list_of_srcref object to a data.frame — as.data.frame.list_of_srcref","text":"","code":"pkg <- system.file(\"examplepkg\", package = \"covtracer\") remotes::install_local(   pkg,   force = TRUE,   quiet = TRUE,   INSTALL_opts = \"--with-keep.source\" ) #> Running `R CMD build`... as.data.frame(pkg_srcrefs(\"examplepkg\")) #>                       name                          srcref #> 1          nested_function  complex_call_stack.R:9:20:11:1 #> 2                    adder           r6_example.R:3:10:9:1 #> 3       recursive_function complex_call_stack.R:21:23:24:1 #> 4              Accumulator         r6_example.R:29:16:32:3 #> 5              Accumulator            r6_example.R:4:3:8:3 #> 6     s3_example_func.list         s3_example.R:20:25:22:1 #> 7          s3_example_func         s3_example.R:10:20:12:1 #> 8                   Person         r6_example.R:60:18:64:5 #> 9                   Person         r6_example.R:72:13:77:5 #> 10               increment         s4_example.R:58:35:60:1 #> 11              rd_sampler         rd_sampler.R:56:15:58:1 #> 12  deeper_nested_function complex_call_stack.R:15:27:17:1 #> 13              hypotenuse           hypotenuse.R:7:15:9:1 #> 14                   Rando        r6_example.R:95:12:102:3 #> 15               increment         s4_example.R:53:25:55:1 #> 16 s3_example_func.default         s3_example.R:15:28:17:1 #> 17  names,S4Example-method         s4_example.R:17:44:19:1 #> 18 names,S4Example2-method         s4_example.R:43:45:45:1 #> 19   show,S4Example-method         s4_example.R:25:43:27:1 #> 20      complex_call_stack   complex_call_stack.R:3:23:5:1 #> 21             PersonPrime                            <NA> #> 22                    help                            <NA> #> 23        reexport_example                            <NA> #> 24              S4Example2                            <NA> #> 25               S4Example                            <NA> #> 26                  person                            <NA> #> 27         rd_data_sampler                            <NA>"},{"path":"/reference/as.package.html","id":null,"dir":"Reference","previous_headings":"","what":"A simple alternative to devtools::as.package — as.package","title":"A simple alternative to devtools::as.package — as.package","text":"Functionally identical devtools' .package, without interactive options package creation.","code":""},{"path":"/reference/as.package.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"A simple alternative to devtools::as.package — as.package","text":"","code":"as.package(x)"},{"path":"/reference/as.package.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"A simple alternative to devtools::as.package — as.package","text":"x package object coerce","code":""},{"path":"/reference/as.package.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"A simple alternative to devtools::as.package — as.package","text":"Code inspired devtools load_pkg_description minor edits reduce devtools dependencies.","code":""},{"path":"/reference/as_list_of_srcref.html","id":null,"dir":"Reference","previous_headings":"","what":"Create an S3 list of srcref objects — as_list_of_srcref","title":"Create an S3 list of srcref objects — as_list_of_srcref","text":"Create S3 list srcref objects","code":""},{"path":"/reference/as_list_of_srcref.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create an S3 list of srcref objects — as_list_of_srcref","text":"","code":"as_list_of_srcref(x)  # S3 method for environment as_list_of_srcref(x)  # S3 method for list as_list_of_srcref(x)"},{"path":"/reference/as_list_of_srcref.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create an S3 list of srcref objects — as_list_of_srcref","text":"x list single srcref coerce list_of_srcref","code":""},{"path":"/reference/as_test_desc.html","id":null,"dir":"Reference","previous_headings":"","what":"Wrap object in test description derivation data — as_test_desc","title":"Wrap object in test description derivation data — as_test_desc","text":"Wrap object test description derivation data Adds \"testthat\" style","code":""},{"path":"/reference/as_test_desc.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Wrap object in test description derivation data — as_test_desc","text":"","code":"as_test_desc(x, type = \"call\")  as_testthat_desc(x)"},{"path":"/reference/as_test_desc.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Wrap object in test description derivation data — as_test_desc","text":"x test description string bind style data type type class attribute test description. Defaults \"call\".","code":""},{"path":"/reference/as_test_desc.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Wrap object in test description derivation data — as_test_desc","text":"test_description subclass object additional style attribute indicating test description derived.","code":""},{"path":"/reference/coverage_check_has_recorded_tests.html","id":null,"dir":"Reference","previous_headings":"","what":"Check that the coverage object retains testing information — coverage_check_has_recorded_tests","title":"Check that the coverage object retains testing information — coverage_check_has_recorded_tests","text":"Check whether coverage object expected fields produced coverage captured option(covr.record_tests = TRUE), throwing error .","code":""},{"path":"/reference/coverage_check_has_recorded_tests.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Check that the coverage object retains testing information — coverage_check_has_recorded_tests","text":"","code":"coverage_check_has_recorded_tests(coverage, warn = TRUE)"},{"path":"/reference/coverage_check_has_recorded_tests.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Check that the coverage object retains testing information — coverage_check_has_recorded_tests","text":"coverage covr coverage object warn Whether warn uncertain whether tests recorded. may uncertain tests recorded tested R code traces.","code":""},{"path":[]},{"path":"/reference/coverage_get_tests.html","id":null,"dir":"Reference","previous_headings":"","what":"Retrieve test traces from a coverage object — coverage_get_tests","title":"Retrieve test traces from a coverage object — coverage_get_tests","text":"Assumes coverage object produced option(covr.record_tests = TRUE).","code":""},{"path":"/reference/coverage_get_tests.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Retrieve test traces from a coverage object — coverage_get_tests","text":"","code":"coverage_get_tests(coverage)"},{"path":"/reference/coverage_get_tests.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Retrieve test traces from a coverage object — coverage_get_tests","text":"coverage covr coverage object","code":""},{"path":[]},{"path":"/reference/coverage_has_recorded_tests.html","id":null,"dir":"Reference","previous_headings":"","what":"Test that the coverage object retains testing information — coverage_has_recorded_tests","title":"Test that the coverage object retains testing information — coverage_has_recorded_tests","text":"Test whether coverage object expected fields produced coverage captured option(covr.record_tests = TRUE).","code":""},{"path":"/reference/coverage_has_recorded_tests.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Test that the coverage object retains testing information — coverage_has_recorded_tests","text":"","code":"coverage_has_recorded_tests(coverage)"},{"path":"/reference/coverage_has_recorded_tests.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Test that the coverage object retains testing information — coverage_has_recorded_tests","text":"coverage covr coverage object","code":""},{"path":[]},{"path":"/reference/dot-tools.html","id":null,"dir":"Reference","previous_headings":"","what":"Loading unexported helpers from tools — .tools","title":"Loading unexported helpers from tools — .tools","text":"Loading unexported helpers tools","code":""},{"path":"/reference/dot-tools.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Loading unexported helpers from tools — .tools","text":"","code":".tools"},{"path":"/reference/dot-tools.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Loading unexported helpers from tools — .tools","text":"object class list length 4.","code":""},{"path":"/reference/expr_str.html","id":null,"dir":"Reference","previous_headings":"","what":"Convert an expression, call or symbol to a single-line string — expr_str","title":"Convert an expression, call or symbol to a single-line string — expr_str","text":"Convert expression, call symbol single-line string","code":""},{"path":"/reference/expr_str.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Convert an expression, call or symbol to a single-line string — expr_str","text":"","code":"expr_str(ref)"},{"path":"/reference/expr_str.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Convert an expression, call or symbol to a single-line string — expr_str","text":"ref srcref","code":""},{"path":"/reference/flat_map_srcrefs.html","id":null,"dir":"Reference","previous_headings":"","what":"Map srcrefs over an iterable object, Filtering non-srcref results — flat_map_srcrefs","title":"Map srcrefs over an iterable object, Filtering non-srcref results — flat_map_srcrefs","text":"Map srcrefs iterable object, Filtering non-srcref results","code":""},{"path":"/reference/flat_map_srcrefs.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Map srcrefs over an iterable object, Filtering non-srcref results — flat_map_srcrefs","text":"","code":"flat_map_srcrefs(xs, ns = NULL, breadcrumbs = character())"},{"path":"/reference/flat_map_srcrefs.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Map srcrefs over an iterable object, Filtering non-srcref results — flat_map_srcrefs","text":"xs iterable object ns character namespace name attribute objects xs. xs objects namespaces attributed already , namespace replaced. breadcrumbs Recursive methods expected propegate vector \"breadcrumbs\" (character vector namespace names encountered traversing namespace used memory seen already), used short-circuiting recursive environment traversal.","code":""},{"path":"/reference/format.list_of_srcref.html","id":null,"dir":"Reference","previous_headings":"","what":"Format a list_of_srcref object — format.list_of_srcref","title":"Format a list_of_srcref object — format.list_of_srcref","text":"Format list_of_srcref character","code":""},{"path":"/reference/format.list_of_srcref.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Format a list_of_srcref object — format.list_of_srcref","text":"","code":"# S3 method for list_of_srcref format(x, ..., full.names = FALSE, full.num = FALSE)"},{"path":"/reference/format.list_of_srcref.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Format a list_of_srcref object — format.list_of_srcref","text":"x list_of_srcref object ... Additional arguments unused full.names logical value indicating whether use full file paths formatting srcrefs. full.num logical value indicating whether use numeric srcref components formatting srcrefs.","code":""},{"path":"/reference/getSrcFilepath.html","id":null,"dir":"Reference","previous_headings":"","what":"Get the full path to the srcref file — getSrcFilepath","title":"Get the full path to the srcref file — getSrcFilepath","text":"Get full path srcref file","code":""},{"path":"/reference/getSrcFilepath.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get the full path to the srcref file — getSrcFilepath","text":"","code":"getSrcFilepath(x)"},{"path":"/reference/getSrcFilepath.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get the full path to the srcref file — getSrcFilepath","text":"x srcref list_of_srcref object","code":""},{"path":"/reference/getSrcFilepath.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get the full path to the srcref file — getSrcFilepath","text":"character vector source file paths.","code":""},{"path":"/reference/get_namespace_object_names.html","id":null,"dir":"Reference","previous_headings":"","what":"Get namespace exports, filtering methods tables and definitions — get_namespace_object_names","title":"Get namespace exports, filtering methods tables and definitions — get_namespace_object_names","text":"Get namespace exports, filtering methods tables definitions","code":""},{"path":"/reference/get_namespace_object_names.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get namespace exports, filtering methods tables and definitions — get_namespace_object_names","text":"","code":"get_namespace_object_names(ns)"},{"path":"/reference/get_namespace_object_names.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get namespace exports, filtering methods tables and definitions — get_namespace_object_names","text":"ns namespace object","code":""},{"path":"/reference/is_srcref.html","id":null,"dir":"Reference","previous_headings":"","what":"Test whether an object is a srcref object — is_srcref","title":"Test whether an object is a srcref object — is_srcref","text":"Test whether object srcref object","code":""},{"path":"/reference/is_srcref.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Test whether an object is a srcref object — is_srcref","text":"","code":"is_srcref(x)"},{"path":"/reference/is_srcref.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Test whether an object is a srcref object — is_srcref","text":"x object","code":""},{"path":"/reference/join_on_containing_srcrefs.html","id":null,"dir":"Reference","previous_headings":"","what":"Join srcref data.frames by intersection of srcref spans — join_on_containing_srcrefs","title":"Join srcref data.frames by intersection of srcref spans — join_on_containing_srcrefs","text":"References source code defined source code line column span relevant source code. function takes data frames containing information pair source code one data frame source code another. case, source code left hand data frame paired entirely contained within record source code right hand data frame.","code":""},{"path":"/reference/join_on_containing_srcrefs.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Join srcref data.frames by intersection of srcref spans — join_on_containing_srcrefs","text":"","code":"join_on_containing_srcrefs(x, y, by = c(srcref = \"srcref\"))"},{"path":"/reference/join_on_containing_srcrefs.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Join srcref data.frames by intersection of srcref spans — join_on_containing_srcrefs","text":"x data.frame, produced .data.frame applied list_of_srcref, y joined. y data.frame, produced .data.frame applied list_of_srcref, joining data srcrefs data encompasses srcrefs x. named character vector column names use merge. name name column left data.frame containing list_of_srcref column, value name column right data.frame containing list_of_srcref column.","code":""},{"path":"/reference/match_containing_srcrefs.html","id":null,"dir":"Reference","previous_headings":"","what":"Match srcrefs against srcrefs that contain them — match_containing_srcrefs","title":"Match srcrefs against srcrefs that contain them — match_containing_srcrefs","text":"Provided two lists srcref objects, find first srcrefs r entirely encapsulate respective srcref l, returning list indices srcrefs r srcref l.","code":""},{"path":"/reference/match_containing_srcrefs.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Match srcrefs against srcrefs that contain them — match_containing_srcrefs","text":"","code":"match_containing_srcrefs(l, r)"},{"path":"/reference/match_containing_srcrefs.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Match srcrefs against srcrefs that contain them — match_containing_srcrefs","text":"l list_of_srcref object r list_of_srcref object","code":""},{"path":"/reference/new_empty_test_trace_tally.html","id":null,"dir":"Reference","previous_headings":"","what":"Build an empty covr-style test trace mapping — new_empty_test_trace_tally","title":"Build an empty covr-style test trace mapping — new_empty_test_trace_tally","text":"Build empty covr-style test trace mapping","code":""},{"path":"/reference/new_empty_test_trace_tally.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Build an empty covr-style test trace mapping — new_empty_test_trace_tally","text":"","code":"new_empty_test_trace_tally()"},{"path":"/reference/obj_namespace_name.html","id":null,"dir":"Reference","previous_headings":"","what":"Get namespace export namespace name — obj_namespace_name","title":"Get namespace export namespace name — obj_namespace_name","text":"objects, identical namespace name provided, reexports retain originating package's namespace name. helper function helps expose name determine exports reexports.","code":""},{"path":"/reference/obj_namespace_name.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get namespace export namespace name — obj_namespace_name","text":"","code":"obj_namespace_name(x, ns)"},{"path":"/reference/obj_namespace_name.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get namespace export namespace name — obj_namespace_name","text":"x value find within namespace ns ns package namespace","code":""},{"path":"/reference/package_check_has_keep_source.html","id":null,"dir":"Reference","previous_headings":"","what":"Verify that the package collection contains srcref information — package_check_has_keep_source","title":"Verify that the package collection contains srcref information — package_check_has_keep_source","text":"Test whether package object collection contains srcref attributes.","code":""},{"path":"/reference/package_check_has_keep_source.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Verify that the package collection contains srcref information — package_check_has_keep_source","text":"","code":"package_check_has_keep_source(env)"},{"path":"/reference/package_check_has_keep_source.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Verify that the package collection contains srcref information — package_check_has_keep_source","text":"env package namespace environment iterable collection package objects","code":""},{"path":"/reference/pkg_srcrefs.html","id":null,"dir":"Reference","previous_headings":"","what":"Extract all the srcref objects of objects within a package namespace — pkg_srcrefs","title":"Extract all the srcref objects of objects within a package namespace — pkg_srcrefs","text":"Extract srcref objects objects within package namespace","code":""},{"path":"/reference/pkg_srcrefs.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Extract all the srcref objects of objects within a package namespace — pkg_srcrefs","text":"","code":"pkg_srcrefs(x)  # S3 method for environment pkg_srcrefs(x)  # S3 method for character pkg_srcrefs(x)  # S3 method for coverage pkg_srcrefs(x)"},{"path":"/reference/pkg_srcrefs.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Extract all the srcref objects of objects within a package namespace — pkg_srcrefs","text":"x package_coverage coverage object, name package used extracted.","code":""},{"path":[]},{"path":"/reference/pkg_srcrefs.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Extract all the srcref objects of objects within a package namespace — pkg_srcrefs","text":"","code":"pkg <- system.file(\"examplepkg\", package = \"covtracer\") remotes::install_local(   pkg,   force = TRUE,   quiet = TRUE,   INSTALL_opts = \"--with-keep.source\" ) #> Running `R CMD build`... pkg_srcrefs(\"examplepkg\") #> $nested_function #>  9 #> 20 #> 11 #>  1 #> 20 #>  1 #> 11 #> 13 #>  #> $adder #>  3 #> 10 #>  9 #>  1 #> 10 #>  1 #> 40 #> 46 #>  #> $recursive_function #> 21 #> 23 #> 24 #>  1 #> 23 #>  1 #> 23 #> 26 #>  #> $Accumulator #> 29 #> 16 #> 32 #>  3 #> 16 #>  3 #> 66 #> 69 #>  #> $Accumulator #>  4 #>  3 #>  8 #>  3 #>  3 #>  3 #> 41 #> 45 #>  #> $s3_example_func.list #>  20 #>  25 #>  22 #>   1 #>  25 #>   1 #> 264 #> 266 #>  #> $s3_example_func #>  10 #>  20 #>  12 #>   1 #>  20 #>   1 #> 254 #> 256 #>  #> $Person #>  60 #>  18 #>  64 #>   5 #>  18 #>   5 #>  97 #> 101 #>  #> $Person #>  72 #>  13 #>  77 #>   5 #>  13 #>   5 #> 109 #> 114 #>  #> $increment #>  58 #>  35 #>  60 #>   1 #>  35 #>   1 #> 325 #> 327 #>  #> $rd_sampler #>  56 #>  15 #>  58 #>   1 #>  15 #>   1 #> 224 #> 226 #>  #> $deeper_nested_function #> 15 #> 27 #> 17 #>  1 #> 27 #>  1 #> 17 #> 19 #>  #> $hypotenuse #>  7 #> 15 #>  9 #>  1 #> 15 #>  1 #> 34 #> 36 #>  #> $Rando #>  95 #>  12 #> 102 #>   3 #>  12 #>   3 #> 132 #> 139 #>  #> $increment #>  53 #>  25 #>  55 #>   1 #>  25 #>   1 #> 320 #> 322 #>  #> $s3_example_func.default #>  15 #>  28 #>  17 #>   1 #>  28 #>   1 #> 259 #> 261 #>  #> $`names,S4Example-method` #>  17 #>  44 #>  19 #>   1 #>  44 #>   1 #> 284 #> 286 #>  #> $`names,S4Example2-method` #>  43 #>  45 #>  45 #>   1 #>  45 #>   1 #> 310 #> 312 #>  #> $`show,S4Example-method` #>  25 #>  43 #>  27 #>   1 #>  43 #>   1 #> 292 #> 294 #>  #> $complex_call_stack #>  3 #> 23 #>  5 #>  1 #> 23 #>  1 #>  5 #>  7 #>  #> $PersonPrime #> NA #>  #> $help #> NA #>  #> $reexport_example #> NA #>  #> $S4Example2 #> NA #>  #> $S4Example #> NA #>  #> $person #> NA #>  #> $rd_data_sampler #> NA #>"},{"path":"/reference/pkg_srcrefs_df.html","id":null,"dir":"Reference","previous_headings":"","what":"Create a data.frame of package srcref objects — pkg_srcrefs_df","title":"Create a data.frame of package srcref objects — pkg_srcrefs_df","text":"Create data.frame package srcref objects","code":""},{"path":"/reference/pkg_srcrefs_df.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create a data.frame of package srcref objects — pkg_srcrefs_df","text":"","code":"pkg_srcrefs_df(x)"},{"path":"/reference/pkg_srcrefs_df.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create a data.frame of package srcref objects — pkg_srcrefs_df","text":"x package_coverage coverage object, name package used extracted.","code":""},{"path":"/reference/pkg_srcrefs_df.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create a data.frame of package srcref objects — pkg_srcrefs_df","text":"data.frame record source code block variables: name character Rd alias package object srcref srcref associated package source code","code":""},{"path":[]},{"path":"/reference/pkg_srcrefs_df.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create a data.frame of package srcref objects — pkg_srcrefs_df","text":"","code":"pkg <- system.file(\"examplepkg\", package = \"covtracer\") remotes::install_local(   pkg,   force = TRUE,   quiet = TRUE,   INSTALL_opts = \"--with-keep.source\" ) #> Running `R CMD build`... pkg_srcrefs_df(\"examplepkg\") #>                       name                          srcref  namespace #> 1          nested_function  complex_call_stack.R:9:20:11:1 examplepkg #> 2                    adder           r6_example.R:3:10:9:1 examplepkg #> 3       recursive_function complex_call_stack.R:21:23:24:1 examplepkg #> 4              Accumulator         r6_example.R:29:16:32:3 examplepkg #> 6     s3_example_func.list         s3_example.R:20:25:22:1 examplepkg #> 7          s3_example_func         s3_example.R:10:20:12:1 examplepkg #> 8                   Person         r6_example.R:60:18:64:5 examplepkg #> 9                   Person         r6_example.R:72:13:77:5 examplepkg #> 10               increment         s4_example.R:58:35:60:1 examplepkg #> 11              rd_sampler         rd_sampler.R:56:15:58:1 examplepkg #> 12  deeper_nested_function complex_call_stack.R:15:27:17:1 examplepkg #> 13              hypotenuse           hypotenuse.R:7:15:9:1 examplepkg #> 14                   Rando        r6_example.R:95:12:102:3 examplepkg #> 15               increment         s4_example.R:53:25:55:1 examplepkg #> 16 s3_example_func.default         s3_example.R:15:28:17:1 examplepkg #> 17  names,S4Example-method         s4_example.R:17:44:19:1 examplepkg #> 18 names,S4Example2-method         s4_example.R:43:45:45:1 examplepkg #> 19   show,S4Example-method         s4_example.R:25:43:27:1 examplepkg #> 20      complex_call_stack   complex_call_stack.R:3:23:5:1 examplepkg #> 21             PersonPrime                            <NA>       <NA> #> 22                    help                            <NA>      utils #> 23        reexport_example                            <NA>      utils #> 24              S4Example2                            <NA> examplepkg #> 25               S4Example                            <NA> examplepkg #> 26                  person                            <NA>      utils #> 27         rd_data_sampler                            <NA>       <NA>"},{"path":"/reference/srcref_expr.html","id":null,"dir":"Reference","previous_headings":"","what":"Parse the expression associated with a srcref — srcref_expr","title":"Parse the expression associated with a srcref — srcref_expr","text":"Parse expression associated srcref","code":""},{"path":"/reference/srcref_expr.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Parse the expression associated with a srcref — srcref_expr","text":"","code":"srcref_expr(ref)"},{"path":"/reference/srcref_expr.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Parse the expression associated with a srcref — srcref_expr","text":"ref srcref","code":""},{"path":"/reference/srcref_str.html","id":null,"dir":"Reference","previous_headings":"","what":"Parse the expression associated with a srcref — srcref_str","title":"Parse the expression associated with a srcref — srcref_str","text":"Parse expression associated srcref","code":""},{"path":"/reference/srcref_str.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Parse the expression associated with a srcref — srcref_str","text":"","code":"srcref_str(ref)"},{"path":"/reference/srcref_str.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Parse the expression associated with a srcref — srcref_str","text":"ref srcref","code":""},{"path":"/reference/srcrefs.html","id":null,"dir":"Reference","previous_headings":"","what":"Retrieve srcrefs — srcrefs","title":"Retrieve srcrefs — srcrefs","text":"function takes code collection returns list related srcref objects list names associate srcref name alias used find documentation. Code collections include structures package namespaces, environments, function definitions, methods tables class generators - object enapsulates single set srcref objects.","code":""},{"path":"/reference/srcrefs.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Retrieve srcrefs — srcrefs","text":"","code":"srcrefs(x, ...)  # S3 method for default srcrefs(x, ..., srcref_names = NULL, breadcrumbs = character())  # S3 method for list srcrefs(x, ..., srcref_names = NULL, breadcrumbs = character())  # S3 method for namespace srcrefs(x, ..., breadcrumbs = character())  # S3 method for environment srcrefs(x, ..., breadcrumbs = character())  # S3 method for R6ClassGenerator srcrefs(x, ..., srcref_names = NULL, breadcrumbs = character())  # S3 method for standardGeneric srcrefs(x, ..., srcref_names = NULL)  # S3 method for nonstandardGenericFunction srcrefs(x, ..., srcref_names = NULL)  # S3 method for MethodDefinition srcrefs(x, ..., srcref_names = NULL)"},{"path":"/reference/srcrefs.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Retrieve srcrefs — srcrefs","text":"x object source srcrefs ... Additional arguments passed methods srcref_names optional field used supercede discovered object names choosing names provide returned list. breadcrumbs Recursive methods expected propegate vector \"breadcrumbs\" (character vector namespace names encountered traversing namespace used memory seen already), used short-circuiting recursive environment traversal.","code":""},{"path":"/reference/srcrefs.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Retrieve srcrefs — srcrefs","text":"list srcref objects. Often, length 1, can larger things like environments, namespaces generic methods. names list reflect name Rd name alias used find information related srcref. Elements list attribute \"namespace\" denoting source environment namespace one can determined srcref object.","code":""},{"path":"/reference/srcrefs.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Retrieve srcrefs — srcrefs","text":"objects, one--one mapping exported object names srcref, just like get using getNamespace(). However, classes methods, can one--many mapping related documentation multiple srcrefs described . case S3 generics, S4 objects R6 objects. Objects without related srcrefs, datasets objects created package build time omitted results.","code":""},{"path":"/reference/srcrefs.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Retrieve srcrefs — srcrefs","text":"","code":"# examples use `with` to execute within namespace as function isn't exported ns <- getNamespace(\"covtracer\")  # load and extract srcrefs for a package with(ns, srcrefs(getNamespace(\"covtracer\"))) #> named list()  # extract srcrefs for functions with(ns, srcrefs(srcrefs)) #> [[1]] #> NULL #>"},{"path":"/reference/test_description.html","id":null,"dir":"Reference","previous_headings":"","what":"Parse a test description from the calling expression — test_description","title":"Parse a test description from the calling expression — test_description","text":"general case, simple indicator source file line number used test description. special cases descriptive information can extracted:","code":""},{"path":"/reference/test_description.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Parse a test description from the calling expression — test_description","text":"","code":"test_description(x)"},{"path":"/reference/test_description.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Parse a test description from the calling expression — test_description","text":"x unit test call stack expression.","code":""},{"path":"/reference/test_description.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Parse a test description from the calling expression — test_description","text":"string describes test. possible, written description test, fall back test call string cases written description can determined.","code":""},{"path":"/reference/test_description.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Parse a test description from the calling expression — test_description","text":"testthat test used test_that, description (desc parameter) extracted evaluated need produce descriptive string. Nested calls test_that currently return outermost test description, although behavior subject change.","code":""},{"path":"/reference/test_description_test_that.html","id":null,"dir":"Reference","previous_headings":"","what":"Parse the test description from a test_that call — test_description_test_that","title":"Parse the test description from a test_that call — test_description_test_that","text":"Parse test description test_that call","code":""},{"path":"/reference/test_description_test_that.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Parse the test description from a test_that call — test_description_test_that","text":"","code":"test_description_test_that(x, ...)"},{"path":"/reference/test_description_test_that.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Parse the test description from a test_that call — test_description_test_that","text":"x test_that call object ... Additional arguments unused","code":""},{"path":"/reference/test_description_test_that_describe.html","id":null,"dir":"Reference","previous_headings":"","what":"Parse the test description from a describe call — test_description_test_that_describe","title":"Parse the test description from a describe call — test_description_test_that_describe","text":"Parse test description describe call","code":""},{"path":"/reference/test_description_test_that_describe.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Parse the test description from a describe call — test_description_test_that_describe","text":"","code":"test_description_test_that_describe(x, ...)"},{"path":"/reference/test_description_test_that_describe.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Parse the test description from a describe call — test_description_test_that_describe","text":"x test_that::describe call object ... Additional arguments unused","code":""},{"path":"/reference/test_description_test_that_describe_it.html","id":null,"dir":"Reference","previous_headings":"","what":"Parse the test description from a it call — test_description_test_that_describe_it","title":"Parse the test description from a it call — test_description_test_that_describe_it","text":"Parse test description call","code":""},{"path":"/reference/test_description_test_that_describe_it.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Parse the test description from a it call — test_description_test_that_describe_it","text":"","code":"test_description_test_that_describe_it(x, ...)"},{"path":"/reference/test_description_test_that_describe_it.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Parse the test description from a it call — test_description_test_that_describe_it","text":"x test_that::describe call object ... Additional arguments unused","code":""},{"path":"/reference/test_srcrefs.html","id":null,"dir":"Reference","previous_headings":"","what":"Extract test srcref objects — test_srcrefs","title":"Extract test srcref objects — test_srcrefs","text":"Extract test srcref objects","code":""},{"path":"/reference/test_srcrefs.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Extract test srcref objects — test_srcrefs","text":"","code":"test_srcrefs(x)  # S3 method for coverage test_srcrefs(x)"},{"path":"/reference/test_srcrefs.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Extract test srcref objects — test_srcrefs","text":"x package_coverage coverage object, test srcrefs extracted.","code":""},{"path":[]},{"path":"/reference/test_srcrefs.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Extract test srcref objects — test_srcrefs","text":"","code":"options(covr.record_tests = TRUE) pkg_path <- system.file(\"examplepkg\", package = \"covtracer\") cov <- covr::package_coverage(pkg_path) test_srcrefs(cov) #> [[1]] #> show(<myS4Example>) #>  #> $`/tmp/RtmpaC2FC8/R_LIBS1662d80ce81/examplepkg/examplepkg-tests/testthat/test-complex-calls.R:2:3:2:50:3:50:2:2` #> complex_call_stack(\"test\") #>  #> $`/tmp/RtmpaC2FC8/R_LIBS1662d80ce81/examplepkg/examplepkg-tests/testthat/test-complex-calls.R:6:3:6:54:3:54:6:6` #> deeper_nested_function(\"test\") #>  #> $`/tmp/RtmpaC2FC8/R_LIBS1662d80ce81/examplepkg/examplepkg-tests/testthat/test-complex-calls.R:15:7:15:54:7:54:15:15` #> complex_call_stack(\"test\") #>  #> $`/tmp/RtmpaC2FC8/R_LIBS1662d80ce81/examplepkg/examplepkg-tests/testthat/test-complex-calls.R:15:7:15:54:7:54:15:15` #> complex_call_stack(\"test\") #>  #> $`/tmp/RtmpaC2FC8/R_LIBS1662d80ce81/examplepkg/examplepkg-tests/testthat/test-complex-calls.R:15:7:15:54:7:54:15:15` #> complex_call_stack(\"test\") #>  #> $`/tmp/RtmpaC2FC8/R_LIBS1662d80ce81/examplepkg/examplepkg-tests/testthat/test-complex-calls.R:15:7:15:54:7:54:15:15` #> complex_call_stack(\"test\") #>  #> $`/tmp/RtmpaC2FC8/R_LIBS1662d80ce81/examplepkg/examplepkg-tests/testthat/test-complex-calls.R:15:7:15:54:7:54:15:15` #> complex_call_stack(\"test\") #>  #> $`/tmp/RtmpaC2FC8/R_LIBS1662d80ce81/examplepkg/examplepkg-tests/testthat/test-complex-calls.R:15:7:15:54:7:54:15:15` #> complex_call_stack(\"test\") #>  #> $`/tmp/RtmpaC2FC8/R_LIBS1662d80ce81/examplepkg/examplepkg-tests/testthat/test-complex-calls.R:15:7:15:54:7:54:15:15` #> complex_call_stack(\"test\") #>  #> $`/tmp/RtmpaC2FC8/R_LIBS1662d80ce81/examplepkg/examplepkg-tests/testthat/test-complex-calls.R:15:7:15:54:7:54:15:15` #> complex_call_stack(\"test\") #>  #> $`/tmp/RtmpaC2FC8/R_LIBS1662d80ce81/examplepkg/examplepkg-tests/testthat/test-complex-calls.R:15:7:15:54:7:54:15:15` #> complex_call_stack(\"test\") #>  #> $`/tmp/RtmpaC2FC8/R_LIBS1662d80ce81/examplepkg/examplepkg-tests/testthat/test-complex-calls.R:15:7:15:54:7:54:15:15` #> complex_call_stack(\"test\") #>  #> $`/tmp/RtmpaC2FC8/R_LIBS1662d80ce81/examplepkg/examplepkg-tests/testthat/test-hypotenuse.R:2:3:2:35:3:35:2:2` #> hypotenuse(3, 4) #>  #> $`/tmp/RtmpaC2FC8/R_LIBS1662d80ce81/examplepkg/examplepkg-tests/testthat/test-hypotenuse.R:5:5:5:39:5:39:5:5` #> hypotenuse(-3, -4) #>  #> $`/tmp/RtmpaC2FC8/R_LIBS1662d80ce81/examplepkg/examplepkg-tests/testthat/test-r6-example.R:2:3:2:43:3:43:2:2` #> initialize(...) #>  #> $`/tmp/RtmpaC2FC8/R_LIBS1662d80ce81/examplepkg/examplepkg-tests/testthat/test-r6-example.R:7:3:7:43:3:43:7:7` #> initialize(...) #>  #> $`/tmp/RtmpaC2FC8/R_LIBS1662d80ce81/examplepkg/examplepkg-tests/testthat/test-r6-example.R:8:3:8:36:3:36:8:8` #> acc$add(3L) #>  #> $`/tmp/RtmpaC2FC8/R_LIBS1662d80ce81/examplepkg/examplepkg-tests/testthat/test-r6-example.R:12:3:12:40:3:40:12:12` #> initialize(...) #>  #> $`/tmp/RtmpaC2FC8/R_LIBS1662d80ce81/examplepkg/examplepkg-tests/testthat/test-r6-example.R:13:3:13:26:3:26:13:13` #> p$print() #>  #> $`/tmp/RtmpaC2FC8/R_LIBS1662d80ce81/examplepkg/examplepkg-tests/testthat/test-r6-example.R:18:3:18:38:3:38:18:18` #> (function (value)  #> { #>     if (if (TRUE) { #>         covr:::count(\"r6_example.R:97:9:97:22:9:22:97:97\") #>         missing(value) #>     }) { #>         if (TRUE) { #>             covr:::count(\"r6_example.R:98:7:98:14:7:14:135:135\") #>             runif(1) #>         } #>     } #>     else { #>         if (TRUE) { #>             covr:::count(\"r6_example.R:100:7:100:48:7:48:137:137\") #>             stop(\"Can't set `$random`\", call. = FALSE) #>         } #>     } #> })() #>  #> $`/tmp/RtmpaC2FC8/R_LIBS1662d80ce81/examplepkg/examplepkg-tests/testthat/test-s3-example.R:2:3:2:46:3:46:2:2` #> s3_example_func(1L) #>  #> $`/tmp/RtmpaC2FC8/R_LIBS1662d80ce81/examplepkg/examplepkg-tests/testthat/test-s3-example.R:6:3:6:54:3:54:6:6` #> s3_example_func(list(1, 2, 3)) #>  #> $`/tmp/RtmpaC2FC8/R_LIBS1662d80ce81/examplepkg/examplepkg-tests/testthat/test-s4-example.R:3:3:3:40:3:40:3:3` #> names(s4ex) #>  #> $`/tmp/RtmpaC2FC8/R_LIBS1662d80ce81/examplepkg/examplepkg-tests/testthat/test-s4-example.R:7:3:7:31:3:31:7:7` #> increment(1) #>"},{"path":"/reference/test_srcrefs_df.html","id":null,"dir":"Reference","previous_headings":"","what":"Create a data.frame of coverage test srcref objects — test_srcrefs_df","title":"Create a data.frame of coverage test srcref objects — test_srcrefs_df","text":"Extract unit test srcrefs coverage object. test name derived test source code, preferrably written annotation, otherwise falling back using code snippet. srcrefs unique expression executed within testing suite.","code":""},{"path":"/reference/test_srcrefs_df.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create a data.frame of coverage test srcref objects — test_srcrefs_df","text":"","code":"test_srcrefs_df(x)"},{"path":"/reference/test_srcrefs_df.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create a data.frame of coverage test srcref objects — test_srcrefs_df","text":"x package_coverage coverage object, name package used extracted.","code":""},{"path":"/reference/test_srcrefs_df.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create a data.frame of coverage test srcref objects — test_srcrefs_df","text":"data.frame test srcrefs extracted coverage object. Contains one record srcref variables: name character test description. testthat tests, desc parameter used, otherwise snippet code used test name srcref srcref object describing location test test_type character indicating structure test.  One \"testthat\", \"call\" NULL","code":""},{"path":[]},{"path":"/reference/test_srcrefs_df.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create a data.frame of coverage test srcref objects — test_srcrefs_df","text":"","code":"options(covr.record_tests = TRUE) pkg_path <- system.file(\"examplepkg\", package = \"covtracer\") cov <- covr::package_coverage(pkg_path) test_srcrefs_df(cov) #>                                                         name #> 1                       S4 Generic Call: show(<myS4Example>) #> 2               Calling a deeply nested series of functions. #> 3             Calling a function halfway through call stack. #> 4                                               symbol: desc #> 5                                               symbol: desc #> 6                                               symbol: desc #> 7                                               symbol: desc #> 8                                               symbol: desc #> 9                                               symbol: desc #> 10                                              symbol: desc #> 11                                              symbol: desc #> 12                                              symbol: desc #> 13                                              symbol: desc #> 14                        hypotenuse is calculated correctly #> 15 hypotenuse is calculated correctly; with negative lengths #> 16        Example R6 Accumulator class constructor is traced #> 17           Example R6 Accumulator class methods are traced #> 18           Example R6 Accumulator class methods are traced #> 19         Example R6 Person class public methods are traced #> 20         Example R6 Person class public methods are traced #> 21  Example R6 Rando class active field functions are traced #> 22              s3_example_func works using default dispatch #> 23                 s3_example_func works using list dispatch #> 24                              S4Example names method works #> 25                  S4Example increment generic method works #>                             srcref     type #> 1                             <NA>     call #> 2    test-complex-calls.R:2:3:2:50 testthat #> 3    test-complex-calls.R:6:3:6:54 testthat #> 4  test-complex-calls.R:15:7:15:54 testthat #> 5  test-complex-calls.R:15:7:15:54 testthat #> 6  test-complex-calls.R:15:7:15:54 testthat #> 7  test-complex-calls.R:15:7:15:54 testthat #> 8  test-complex-calls.R:15:7:15:54 testthat #> 9  test-complex-calls.R:15:7:15:54 testthat #> 10 test-complex-calls.R:15:7:15:54 testthat #> 11 test-complex-calls.R:15:7:15:54 testthat #> 12 test-complex-calls.R:15:7:15:54 testthat #> 13 test-complex-calls.R:15:7:15:54 testthat #> 14      test-hypotenuse.R:2:3:2:35 testthat #> 15      test-hypotenuse.R:5:5:5:39 testthat #> 16      test-r6-example.R:2:3:2:43 testthat #> 17      test-r6-example.R:7:3:7:43 testthat #> 18      test-r6-example.R:8:3:8:36 testthat #> 19    test-r6-example.R:12:3:12:40 testthat #> 20    test-r6-example.R:13:3:13:26 testthat #> 21    test-r6-example.R:18:3:18:38 testthat #> 22      test-s3-example.R:2:3:2:46 testthat #> 23      test-s3-example.R:6:3:6:54 testthat #> 24      test-s4-example.R:3:3:3:40 testthat #> 25      test-s4-example.R:7:3:7:31 testthat"},{"path":"/reference/test_trace_df.html","id":null,"dir":"Reference","previous_headings":"","what":"Build a traceability matrix that links documented behaviors to unit tests — test_trace_df","title":"Build a traceability matrix that links documented behaviors to unit tests — test_trace_df","text":"Intercept unit test coverage reports process results link evaluated functions unit tests trigger evaluation. , can link associated function documentation object tests triggered evaluation way reusing existing documentation generate specifications.","code":""},{"path":"/reference/test_trace_df.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Build a traceability matrix that links documented behaviors to unit tests — test_trace_df","text":"","code":"test_trace_df(x, ...)  # S3 method for coverage test_trace_df(   x,   ...,   pkg = as.package(attr(x, \"package\")$path),   aggregate_by = sum )"},{"path":"/reference/test_trace_df.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Build a traceability matrix that links documented behaviors to unit tests — test_trace_df","text":"x package object, name, source code path coverage result use bases tracing tests. Coverage results must produced using options(covr.record_tests = TRUE). ... Additional arguments unused pkg package object produced .package, specific package object used inspecting package namespace. aggregate_by NULL function aggregate recurring hits counts direct columns test trace. NULL, aggregation applied. (Default sum)","code":""},{"path":"/reference/test_trace_mapping.html","id":null,"dir":"Reference","previous_headings":"","what":"Create a data.frame mapping tests to coverage traces — test_trace_mapping","title":"Create a data.frame mapping tests to coverage traces — test_trace_mapping","text":"Extract matrix used relate test code traces test evaluates.","code":""},{"path":"/reference/test_trace_mapping.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create a data.frame mapping tests to coverage traces — test_trace_mapping","text":"","code":"test_trace_mapping(x)"},{"path":"/reference/test_trace_mapping.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create a data.frame mapping tests to coverage traces — test_trace_mapping","text":"x coverage object produced options(covr.record_tests = TRUE).","code":""},{"path":"/reference/test_trace_mapping.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create a data.frame mapping tests to coverage traces — test_trace_mapping","text":"data.frame one record line code executed, variables: test index test executed, reflecting order tests executed depth call stack depth coverage trace evaluated index expression evaluated test. can used recover order trace execution given test index trace index coverage trace evaluated","code":""},{"path":[]},{"path":"/reference/test_trace_mapping.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create a data.frame mapping tests to coverage traces — test_trace_mapping","text":"","code":"options(covr.record_tests = TRUE) pkg_path <- system.file(\"examplepkg\", package = \"covtracer\") cov <- covr::package_coverage(pkg_path) test_trace_mapping(cov) #>        test depth  i trace #>   [1,]    1     1  1    24 #>   [2,]    2    37  1    19 #>   [3,]    2    38  2    15 #>   [4,]    2    39  3    23 #>   [5,]    2    40  4    22 #>   [6,]    2    40  5    26 #>   [7,]    2    41  6    22 #>   [8,]    2    41  7    26 #>   [9,]    2    42  8    22 #>  [10,]    2    42  9    26 #>  [11,]    2    43 10    22 #>  [12,]    2    43 11    25 #>  [13,]    3    37  1    23 #>  [14,]    3    38  2    22 #>  [15,]    3    38  3    26 #>  [16,]    3    39  4    22 #>  [17,]    3    39  5    26 #>  [18,]    3    40  6    22 #>  [19,]    3    40  7    26 #>  [20,]    3    41  8    22 #>  [21,]    3    41  9    25 #>  [22,]    4    42  1    19 #>  [23,]    4    43  2    15 #>  [24,]    4    44  3    23 #>  [25,]    4    45  4    22 #>  [26,]    4    45  5    26 #>  [27,]    4    46  6    22 #>  [28,]    4    46  7    26 #>  [29,]    4    47  8    22 #>  [30,]    4    47  9    26 #>  [31,]    4    48 10    22 #>  [32,]    4    48 11    25 #>  [33,]    5    42  1    19 #>  [34,]    5    43  2    15 #>  [35,]    5    44  3    23 #>  [36,]    5    45  4    22 #>  [37,]    5    45  5    26 #>  [38,]    5    46  6    22 #>  [39,]    5    46  7    26 #>  [40,]    5    47  8    22 #>  [41,]    5    47  9    26 #>  [42,]    5    48 10    22 #>  [43,]    5    48 11    25 #>  [44,]    6    42  1    19 #>  [45,]    6    43  2    15 #>  [46,]    6    44  3    23 #>  [47,]    6    45  4    22 #>  [48,]    6    45  5    26 #>  [49,]    6    46  6    22 #>  [50,]    6    46  7    26 #>  [51,]    6    47  8    22 #>  [52,]    6    47  9    26 #>  [53,]    6    48 10    22 #>  [54,]    6    48 11    25 #>  [55,]    7    42  1    19 #>  [56,]    7    43  2    15 #>  [57,]    7    44  3    23 #>  [58,]    7    45  4    22 #>  [59,]    7    45  5    26 #>  [60,]    7    46  6    22 #>  [61,]    7    46  7    26 #>  [62,]    7    47  8    22 #>  [63,]    7    47  9    26 #>  [64,]    7    48 10    22 #>  [65,]    7    48 11    25 #>  [66,]    8    42  1    19 #>  [67,]    8    43  2    15 #>  [68,]    8    44  3    23 #>  [69,]    8    45  4    22 #>  [70,]    8    45  5    26 #>  [71,]    8    46  6    22 #>  [72,]    8    46  7    26 #>  [73,]    8    47  8    22 #>  [74,]    8    47  9    26 #>  [75,]    8    48 10    22 #>  [76,]    8    48 11    25 #>  [77,]    9    42  1    19 #>  [78,]    9    43  2    15 #>  [79,]    9    44  3    23 #>  [80,]    9    45  4    22 #>  [81,]    9    45  5    26 #>  [82,]    9    46  6    22 #>  [83,]    9    46  7    26 #>  [84,]    9    47  8    22 #>  [85,]    9    47  9    26 #>  [86,]    9    48 10    22 #>  [87,]    9    48 11    25 #>  [88,]   10    42  1    19 #>  [89,]   10    43  2    15 #>  [90,]   10    44  3    23 #>  [91,]   10    45  4    22 #>  [92,]   10    45  5    26 #>  [93,]   10    46  6    22 #>  [94,]   10    46  7    26 #>  [95,]   10    47  8    22 #>  [96,]   10    47  9    26 #>  [97,]   10    48 10    22 #>  [98,]   10    48 11    25 #>  [99,]   11    42  1    19 #> [100,]   11    43  2    15 #> [101,]   11    44  3    23 #> [102,]   11    45  4    22 #> [103,]   11    45  5    26 #> [104,]   11    46  6    22 #> [105,]   11    46  7    26 #> [106,]   11    47  8    22 #> [107,]   11    47  9    26 #> [108,]   11    48 10    22 #> [109,]   11    48 11    25 #> [110,]   12    42  1    19 #> [111,]   12    43  2    15 #> [112,]   12    44  3    23 #> [113,]   12    45  4    22 #> [114,]   12    45  5    26 #> [115,]   12    46  6    22 #> [116,]   12    46  7    26 #> [117,]   12    47  8    22 #> [118,]   12    47  9    26 #> [119,]   12    48 10    22 #> [120,]   12    48 11    25 #> [121,]   13    42  1    19 #> [122,]   13    43  2    15 #> [123,]   13    44  3    23 #> [124,]   13    45  4    22 #> [125,]   13    45  5    26 #> [126,]   13    46  6    22 #> [127,]   13    46  7    26 #> [128,]   13    47  8    22 #> [129,]   13    47  9    26 #> [130,]   13    48 10    22 #> [131,]   13    48 11    25 #> [132,]   14    37  1     7 #> [133,]   15    48  1     7 #> [134,]   16    43  1     8 #> [135,]   17    43  1     8 #> [136,]   18    37  1    17 #> [137,]   18    37  2    28 #> [138,]   19    43  1    12 #> [139,]   19    43  2     1 #> [140,]   20    43  1     3 #> [141,]   20    43  2    21 #> [142,]   20    43  3    18 #> [143,]   21    37  1     5 #> [144,]   21    37  2     9 #> [145,]   22    37  1     6 #> [146,]   22    38  2    20 #> [147,]   23    37  1     6 #> [148,]   23    38  2     2 #> [149,]   24    38  1    13 #> [150,]   25    37  1    10 #> [151,]   25    38  2    16"},{"path":"/reference/trace_srcrefs.html","id":null,"dir":"Reference","previous_headings":"","what":"Extract srcref objects from coverage object traces — trace_srcrefs","title":"Extract srcref objects from coverage object traces — trace_srcrefs","text":"Extract srcref objects coverage object traces","code":""},{"path":"/reference/trace_srcrefs.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Extract srcref objects from coverage object traces — trace_srcrefs","text":"","code":"trace_srcrefs(x)  # S3 method for coverage trace_srcrefs(x)"},{"path":"/reference/trace_srcrefs.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Extract srcref objects from coverage object traces — trace_srcrefs","text":"x (link[covr]{package_coverage}) covr coverage object produced options(covr.record_tests = TRUE).","code":""},{"path":[]},{"path":"/reference/trace_srcrefs_df.html","id":null,"dir":"Reference","previous_headings":"","what":"Create a data.frame of coverage trace srcref objects — trace_srcrefs_df","title":"Create a data.frame of coverage trace srcref objects — trace_srcrefs_df","text":"Extract coverage traces. Traces traced lines code counted evaluating code coverage, used counting expression evaluation. traced unique expression within package's source code.","code":""},{"path":"/reference/trace_srcrefs_df.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create a data.frame of coverage trace srcref objects — trace_srcrefs_df","text":"","code":"trace_srcrefs_df(x)"},{"path":"/reference/trace_srcrefs_df.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create a data.frame of coverage trace srcref objects — trace_srcrefs_df","text":"x package_coverage coverage object, name package used extracted.","code":""},{"path":"/reference/trace_srcrefs_df.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create a data.frame of coverage trace srcref objects — trace_srcrefs_df","text":"data.frame, record trace srcref variables: name character identifier. use names elements coverage object, srcref \"keys\". srcref srcref object trace source code location","code":""},{"path":[]},{"path":"/reference/trace_srcrefs_df.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create a data.frame of coverage trace srcref objects — trace_srcrefs_df","text":"","code":"options(covr.record_tests = TRUE) pkg_path <- system.file(\"examplepkg\", package = \"covtracer\") cov <- covr::package_coverage(pkg_path) trace_srcrefs_df(cov) #>                                            name #> 1          r6_example.R:63:7:63:24:7:24:100:100 #> 2            s3_example.R:21:3:21:8:3:8:265:265 #> 3          r6_example.R:74:7:74:23:7:23:111:111 #> 4                r6_example.R:4:3:8:3:3:3:41:45 #> 5            r6_example.R:97:9:97:22:9:22:97:97 #> 6          s3_example.R:11:3:11:30:3:30:255:255 #> 7              hypotenuse.R:8:3:8:25:3:25:35:35 #> 8            r6_example.R:31:5:31:19:5:19:68:68 #> 9          r6_example.R:98:7:98:14:7:14:135:135 #> 10         s4_example.R:54:3:54:30:3:30:321:321 #> 11         s4_example.R:44:3:44:15:3:15:311:311 #> 12           r6_example.R:62:7:62:26:7:26:99:99 #> 13         s4_example.R:18:3:18:15:3:15:285:285 #> 14       r6_example.R:100:7:100:48:7:48:137:137 #> 15   complex_call_stack.R:10:3:10:27:3:27:12:12 #> 16           s4_example.R:59:3:59:7:3:7:326:326 #> 17             r6_example.R:6:5:6:28:5:28:43:43 #> 18         r6_example.R:76:7:76:50:7:50:113:113 #> 19       complex_call_stack.R:4:3:4:20:3:20:6:6 #> 20         s3_example.R:16:3:16:11:3:11:260:260 #> 21         r6_example.R:75:7:75:51:7:51:112:112 #> 22   complex_call_stack.R:22:7:22:13:7:13:22:22 #> 23   complex_call_stack.R:16:3:16:23:3:23:18:18 #> 24         s4_example.R:26:3:26:20:3:20:293:293 #> 25 complex_call_stack.R:22:16:22:24:16:24:22:22 #> 26   complex_call_stack.R:23:3:23:31:3:31:25:25 #> 27           rd_sampler.R:57:3:57:6:3:6:225:225 #> 28             r6_example.R:7:5:7:19:5:19:44:44 #>                              srcref #> 1           r6_example.R:63:7:63:24 #> 2            s3_example.R:21:3:21:8 #> 3           r6_example.R:74:7:74:23 #> 4              r6_example.R:4:3:8:3 #> 5           r6_example.R:97:9:97:22 #> 6           s3_example.R:11:3:11:30 #> 7             hypotenuse.R:8:3:8:25 #> 8           r6_example.R:31:5:31:19 #> 9           r6_example.R:98:7:98:14 #> 10          s4_example.R:54:3:54:30 #> 11          s4_example.R:44:3:44:15 #> 12          r6_example.R:62:7:62:26 #> 13          s4_example.R:18:3:18:15 #> 14        r6_example.R:100:7:100:48 #> 15  complex_call_stack.R:10:3:10:27 #> 16           s4_example.R:59:3:59:7 #> 17            r6_example.R:6:5:6:28 #> 18          r6_example.R:76:7:76:50 #> 19    complex_call_stack.R:4:3:4:20 #> 20          s3_example.R:16:3:16:11 #> 21          r6_example.R:75:7:75:51 #> 22  complex_call_stack.R:22:7:22:13 #> 23  complex_call_stack.R:16:3:16:23 #> 24          s4_example.R:26:3:26:20 #> 25 complex_call_stack.R:22:16:22:24 #> 26  complex_call_stack.R:23:3:23:31 #> 27           rd_sampler.R:57:3:57:6 #> 28            r6_example.R:7:5:7:19"},{"path":"/reference/with_pseudo_srcref.html","id":null,"dir":"Reference","previous_headings":"","what":"For consistency, stub calls with srcref-like attributes — with_pseudo_srcref","title":"For consistency, stub calls with srcref-like attributes — with_pseudo_srcref","text":"relevant data can traced existing srcref. However, data, test traces coverage objects, likely cleaned srcfiles deleted, causing barrage warnings time objects printed.","code":""},{"path":"/reference/with_pseudo_srcref.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"For consistency, stub calls with srcref-like attributes — with_pseudo_srcref","text":"","code":"with_pseudo_srcref(call, file, lloc)"},{"path":"/reference/with_pseudo_srcref.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"For consistency, stub calls with srcref-like attributes — with_pseudo_srcref","text":"call code object, often call object file filepath bind srcfile object lloc srcef-like lloc numeric vector","code":""},{"path":"/reference/with_pseudo_srcref.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"For consistency, stub calls with srcref-like attributes — with_pseudo_srcref","text":"pseudo_srcref adds srcref data continues preserve expression content. allows expression objects pretty-printed like srcrefs included list_of_srcref data.frame column.","code":""}]
